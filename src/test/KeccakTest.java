package test;

import org.junit.Assert;
import org.junit.Test;
import sha3.Keccak;

import java.util.Arrays;

public class KeccakTest {

    /*
     * Test vectors courtesy of
     * https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHAKE256_Msg1600.pdf
     */
    int[] testVectorOne = {
            0xCD, 0x8A, 0x92, 0x0E, 0xD1, 0x41, 0xAA, 0x04, 0x07,
            0xA2, 0x2D, 0x59, 0x28, 0x86, 0x52, 0xE9, 0xD9, 0xF1,
            0xA7, 0xEE, 0x0C, 0x1E, 0x7C, 0x1C, 0xA6, 0x99, 0x42,
            0x4D, 0xA8, 0x4A, 0x90, 0x4D, 0x2D, 0x70, 0x0C, 0xAA,
            0xE7, 0x39, 0x6E, 0xCE, 0x96, 0x60, 0x44, 0x40, 0x57,
            0x7D, 0xA4, 0xF3, 0xAA, 0x22, 0xAE, 0xB8, 0x85, 0x7F,
            0x96, 0x1C, 0x4C, 0xD8, 0xE0, 0x6F, 0x0A, 0xE6, 0x61,
            0x0B, 0x10, 0x48, 0xA7, 0xF6, 0x4E, 0x10, 0x74, 0xCD,
            0x62, 0x9E, 0x85, 0xAD, 0x75, 0x66, 0x04, 0x8E, 0xFC,
            0x4F, 0xB5, 0x00, 0xB4, 0x86, 0xA3, 0x30, 0x9A, 0x8F,
            0x26, 0x72, 0x4C, 0x0E, 0xD6, 0x28, 0x00, 0x1A, 0x10,
            0x99, 0x42, 0x24, 0x68, 0xDE, 0x72, 0x6F, 0x10, 0x61,
            0xD9, 0x9E, 0xB9, 0xE9, 0x36, 0x04, 0xD5, 0xAA, 0x74,
            0x67, 0xD4, 0xB1, 0xBD, 0x64, 0x84, 0x58, 0x2A, 0x38,
            0x43, 0x17, 0xD7, 0xF4, 0x7D, 0x75, 0x0B, 0x8F, 0x54,
            0x99, 0x51, 0x2B, 0xB8, 0x5A, 0x22, 0x6C, 0x42, 0x43,
            0x55, 0x6E, 0x69, 0x6F, 0x6B, 0xD0, 0x72, 0xC5, 0xAA,
            0x2D, 0x9B, 0x69, 0x73, 0x02, 0x44, 0xB5, 0x68, 0x53,
            0xD1, 0x69, 0x70, 0xAD, 0x81, 0x7E, 0x21, 0x3E, 0x47,
            0x06, 0x18, 0x17, 0x80, 0x01, 0xC9, 0xFB, 0x56, 0xC5,
            0x4F, 0xEF, 0xA5, 0xFE, 0xE6, 0x7D, 0x2D, 0xA5, 0x24,
            0xBB, 0x3B, 0x0B, 0x61, 0xEF, 0x0E, 0x91, 0x14, 0xA9,
            0x2C, 0xDB, 0xB6, 0xCC, 0xCB, 0x98, 0x61, 0x5C, 0xFE,
            0x76, 0xE3, 0x51, 0x0D, 0xD8, 0x8D, 0x1C, 0xC2, 0x8F,
            0xF9, 0x92, 0x87, 0x51, 0x2F, 0x24, 0xBF, 0xAF, 0xA1,
            0xA7, 0x68, 0x77, 0xB6, 0xF3, 0x71, 0x98, 0xE3, 0xA6,
            0x41, 0xC6, 0x8A, 0x7C, 0x42, 0xD4, 0x5F, 0xA7, 0xAC,
            0xC1, 0x0D, 0xAE, 0x5F, 0x3C, 0xEF, 0xB7, 0xB7, 0x35,
            0xF1, 0x2D, 0x4E, 0x58, 0x9F, 0x7A, 0x45, 0x6E, 0x78,
            0xC0, 0xF5, 0xE4, 0xC4, 0x47, 0x1F, 0xFF, 0xA5, 0xE4,
            0xFA, 0x05, 0x14, 0xAE, 0x97, 0x4D, 0x8C, 0x26, 0x48,
            0x51, 0x3B, 0x5D, 0xB4, 0x94, 0xCE, 0xA8, 0x47, 0x15,
            0x6D, 0x27, 0x7A, 0xD0, 0xE1, 0x41, 0xC2, 0x4C, 0x78,
            0x39, 0x06, 0x4C, 0xD0, 0x88, 0x51, 0xBC, 0x2E, 0x7C,
            0xA1, 0x09, 0xFD, 0x4E, 0x25, 0x1C, 0x35, 0xBB, 0x0A,
            0x04, 0xFB, 0x05, 0xB3, 0x64, 0xFF, 0x8C, 0x4D, 0x8B,
            0x59, 0xBC, 0x30, 0x3E, 0x25, 0x32, 0x8C, 0x09, 0xA8,
            0x82, 0xE9, 0x52, 0x51, 0x8E, 0x1A, 0x8A, 0xE0, 0xFF,
            0x26, 0x5D, 0x61, 0xC4, 0x65, 0x89, 0x69, 0x73, 0xD7,
            0x49, 0x04, 0x99, 0xDC, 0x63, 0x9F, 0xB8, 0x50, 0x2B,
            0x39, 0x45, 0x67, 0x91, 0xB1, 0xB6, 0xEC, 0x5B, 0xCC,
            0x5D, 0x9A, 0xC3, 0x6A, 0x6D, 0xF6, 0x22, 0xA0, 0x70,
            0xD4, 0x3F, 0xED, 0x78, 0x1F, 0x5F, 0x14, 0x9F, 0x7B,
            0x62, 0x67, 0x5E, 0x7D, 0x1A, 0x4D, 0x6D, 0xEC, 0x48,
            0xC1, 0xC7, 0x16, 0x45, 0x86, 0xEA, 0xE0, 0x6A, 0x51,
            0x20, 0x8C, 0x0B, 0x79, 0x12, 0x44, 0xD3, 0x07, 0x72,
            0x65, 0x05, 0xC3, 0xAD, 0x4B, 0x26, 0xB6, 0x82, 0x23,
            0x77, 0x25, 0x7A, 0xA1, 0x52, 0x03, 0x75, 0x60, 0xA7,
            0x39, 0x71, 0x4A, 0x3C, 0xA7, 0x9B, 0xD6, 0x05, 0x54,
            0x7C, 0x9B, 0x78, 0xDD, 0x1F, 0x59, 0x6F, 0x2D, 0x4F,
            0x17, 0x91, 0xBC, 0x68, 0x9A, 0x0E, 0x9B, 0x79, 0x9A,
            0x37, 0x33, 0x9C, 0x04, 0x27, 0x57, 0x33, 0x74, 0x01,
            0x43, 0xEF, 0x5D, 0x2B, 0x58, 0xB9, 0x6A, 0x36, 0x3D,
            0x4E, 0x08, 0x07, 0x6A, 0x1A, 0x9D, 0x78, 0x46, 0x43,
            0x6E, 0x4D, 0xCA, 0x57, 0x28, 0xB6, 0xF7, 0x60, 0xEE,
            0xF0, 0xCA, 0x92, 0xBF, 0x0B, 0xE5, 0x61, 0x5E, 0x96,
            0x95, 0x9D, 0x76, 0x71, 0x97, 0xA0, 0xBE, 0xEB};

    @Test
    public void testShake() {
        byte[] test = new byte[200]; //
        Arrays.fill(test, (byte) 0xA3);
        byte[] out = Keccak.SHAKE256(test, 4096);
        Assert.assertEquals(testVectorOne.length, out.length);

        for (int i = 0; i < out.length; i++) {
            // equality is tested with a bytewise xor to resolve integer/byte representation disparity
            Assert.assertEquals(0, (out[i] ^ testVectorOne[i]) & 0xff);
        }
    }
}
